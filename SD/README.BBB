# FPP BBB Images creation notes (work in progress)
#
# FPP images are currently based on the following Debian BeagleBone images:
# bone-debian-10.4-console-armhf-2020-06-01-1gb.img
# from  https://rcn-ee.com/rootfs/bb.org/testing/2020-06-01/buster-console/
#
# The below steps (much can be run via copy/paste into a terminal) will
# prepare the "clean image" from above to have the appropriate 
# dependencies installed, kernel updated, bootloaders, etc... ready
# to run the FPP_Install script.    At this point, parts of it
# require editing of text files with nano.  In particular the
# /boot/uEnv.txt file and the various files in /lib/systemd/system
#
# Make sure you read all the comment in this file and follow 
# any instructions they may specify.
#
# This NEEDS to be done on a Beaglebone Black variant that
# contains an eMMC (so not a PocketBeagle) and it will wipe out
# the contents of the eMMC.   We setup the system on the eMMC
# and then copy the system to the SD card

# Burn the above image onto an SD card and insert into the BBB and boot
# Login with default debian:temppwd then "sudo bash" to become root
cd /tmp
wget https://raw.githubusercontent.com/FalconChristmas/fpp/master/SD/BBB-FlashMMC.sh
chmod +x BBB-FlashMMC.sh
./BBB-FlashMMC.sh -noreboot ext4 /dev/mmcblk1

#copy the ssh keys temporarily to allow it to boot quicker and avoid
#having to reset known_hosts while building image
mount -t ext4 /dev/mmcblk1p1 /tmp/rootfs
cp -a /etc/ssh/* /tmp/rootfs/etc/ssh
shutdown -h now


#That will flash the buster-console image to the internal eMMC and then shutdown
#Remove the SD card and restart the BBB, re-login with default debian:temppwd
#then "sudo bash" to become root

apt-get update
apt-get -y upgrade

#need to install/generate the UTF-8 locales
apt-get install -y locales git curl
echo "en_US.UTF-8 UTF-8" >> /etc/locale.gen
locale-gen
localectl set-locale LANG="en_US.utf8"

cd /opt/scripts
git pull
cd /opt/scripts/tools

#check
cd /root
wget https://github.com/FalconChristmas/fpp-linux-kernel/raw/master/debs/linux-image-4.19.94fpp_4.19.94fpp-3_armhf.deb
wget https://github.com/FalconChristmas/fpp-linux-kernel/raw/master/debs/linux-headers-4.19.94fpp_4.19.94fpp-3_armhf.deb
dpkg -i *.deb
rm -f *.deb

apt-get remove -y --purge --autoremove linux-image-$(uname -r) linux-headers-$(uname -r)

# delete old kernels and modules in /boot and /lib/modules
# and in /boot/dtbs and any initrd's
rm -rf /lib/modules/$(uname -r)
rm -rf /boot/dtbs/$(uname -r)
rm -rf /boot/initrd.img*


cd /opt/scripts/tools/developers/
sudo ./update_bootloader.sh

cd /opt/backup/uboot
export BOOTLOADERVER=v2019.04-r13
curl --output MLO  https://rcn-ee.com/repos/bootloader/am335x_evm/MLO-am335x_evm-${BOOTLOADERVER}
curl --output u-boot.img https://rcn-ee.com/repos/bootloader/am335x_evm/u-boot-am335x_evm-${BOOTLOADERVER}.img
echo "$BOOTLOADERVER" > version.txt


# remove a bunch of source that is not needed, free's up space
rm -f /etc/modules-load.d/roboticscape_modules.conf
rm -rf /usr/local/lib/node_modules
rm -rf /var/lib/cloud9
rm -rf /opt/source/Robotics_Cape_Installer
rm -rf /opt/source/dtb*
rm -rf /opt/source/u-boot*
rm -rf /opt/source/rcpy
rm -rf /opt/source/pyctrl
rm -rf /opt/source/fb-test-app*
rm -rf /opt/source/beagle-tester*
rm -rf /opt/source/dtb*
rm -rf /opt/source/BB*
rm -rf /opt/source/adafruit*
rm -rf /opt/source/Userspace*
rm -rf /opt/source/py-uio
rm -rf /opt/source/librobotcontrol
rm -rf /usr/local/bin/node-red*
rm -rf /var/cache/doc-beaglebone-getting-started
rm -rf /usr/share/beagle-tester
rm -rf /usr/sbin/beagle-tester*
rm -rf /lib/systemd/system/beagle-tester.service
rm -rf /etc/udev/rules.d/beagle-tester.rules
rm -rf /opt/cloud9
rm -rf /etc/avahi/services/cloud9.service
rm -f /var/local/bb_usb_mass_storage.img

# need to reboot so that the new kernel is picked up and used
reboot
#re-login in and make sure "df -k" reports 2.5G+ of space for /


cd /root
wget -O ./FPP_Install.sh  http://raw.githubusercontent.com/FalconChristmas/fpp/master/SD/FPP_Install.sh
chmod 700 ./FPP_Install.sh
./FPP_Install.sh --img

# once FPP_Install is done, the wifi drivers and such are installed so the linux-headers
# are no longer needed, remove them to save 150MB of space
apt-get remove -y --purge --autoremove linux-headers-$(uname -r)
apt-get clean

# edit /etc/fstab and make sure it looks OK for tmpfs
reboot


#place 4G SD card in sd slot
# zero out everything unused so compressing the image will work better
dd if=/dev/zero of=/dev/mmcblk0 bs=1M status=progress count=3600
/opt/fpp/SD/BBB-FlashMMC.sh -s 3500M -noreboot ext4 /dev/mmcblk0
rmdir /tmp/rootfs

#On a MAC, the resulting SD cards can be used to create an image via:
# use diskutil list to get the disk name (/dev/rdisk3)
sudo dd if=/dev/rdisk3 of=FPP-v4.0-BBB.img bs=1m count=3572


# For btrfs:

dd if=/dev/zero of=/dev/mmcblk0 bs=1M status=progress count=2000
/opt/fpp/SD/BBB-FlashMMC.sh -s 1750M -noreboot btrfs /dev/mmcblk0

sudo dd if=/dev/rdisk3 of=FPP-v3.1-BBB-btrfs.img bs=1m count=2000



# To create the squashfs image needed for OS updates
# On a separate Linux box:  (this will take a LOOOONG time)
# mksquashfs is multithreaded so its recommended to use a multicore
# box for this and not an actual BBB
apt-get install squashfs-tools
mount /dev/sda1 /mnt
mksquashfs /mnt /home/fpp/media/bbb-4.0.sqfs -comp xz
